{"backend_state":"init","connection_file":"/projects/820ea3ac-497c-43fd-9cb7-abe34292faa8/.local/share/jupyter/runtime/kernel-1298c0e3-4001-4605-82a2-e4910446bb6d.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"9f1b5d","input":"# Install NLTK - pip install nltk\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package wordnet to /projects/820ea3ac-497c-43f\n[nltk_data]     d-9cb7-abe34292faa8/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to /projects/820ea3ac-497c-43fd-\n[nltk_data]     9cb7-abe34292faa8/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":1,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"21c3f4","input":"nltk.download('stopwords')\nfrom nltk.corpus import stopwords","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package stopwords to /projects/820ea3ac-497c-4\n[nltk_data]     3fd-9cb7-abe34292faa8/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"6959e5","input":"# Removing stopwords\ndef remove_stopwords(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [word for word in words if word not in stopwords.words('english')]\n        sentences[i] = ' '.join(words)\n    return sentences\nsentences = remove_stopwords(sentences)\nprint(sentences[:10]) #eliminating all stop words","output":{"0":{"name":"stdout","output_type":"stream","text":"['barack hussein obama ii ( /bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ ( listen ) bə-rahk hoo-sayn oh-bah-mə ; born august , ) american politician served th president united states .', 'first african-american president united states .', 'member democratic party , previously served u.s. senator illinois illinois state senator .', 'obama born honolulu , hawaii .', 'graduating columbia university , worked community organizer chicago .', ', enrolled harvard law school , first black president harvard law review .', 'graduating , became civil rights attorney academic , teaching constitutional law university chicago law school .', 'turning elective politics , represented th district illinois senate , ran u.s. senate .', 'obama received national attention march senate primary win , well-received july democratic national convention keynote address , landslide november election senate .', ', year beginning campaign , close primary campaign hillary clinton , nominated democratic party president .']\n"}},"pos":15,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"882456","input":"stopwords.words('english')[:10]","output":{"0":{"data":{"text/plain":"['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\"]"},"exec_count":12,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"34f02a","input":"from nltk.stem import PorterStemmer\n\nstemmer = PorterStemmer()\n# try each of the word below\nstemmer.stem('troubled')\n#stemmer.stem('trouble')\n#stemmer.stem('troubling')\n#stemmer.stem('troubles')","output":{"0":{"data":{"text/plain":"'troubl'"},"exec_count":16,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"c257cc","input":"sentences = nltk.sent_tokenize(text)\nsentences = remove_stopwords(sentences)\nstemmer = PorterStemmer()\n\n# Stemming\ndef stem_sentences(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [stemmer.stem(word) for word in words]\n        sentences[i] = ' '.join(words)\n    return sentences\n\nstemmed_sentences = stem_sentences(sentences)\nprint(stemmed_sentences[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"['barack hussein obama ii ( /bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ ( listen ) bə-rahk hoo-sayn oh-bah-mə ; born august , ) american politician serv th presid unit state .', 'first african-american presid unit state .', 'member democrat parti , previous serv u.s. senat illinoi illinoi state senat .', 'obama born honolulu , hawaii .', 'graduat columbia univers , work commun organ chicago .', ', enrol harvard law school , first black presid harvard law review .', 'graduat , becam civil right attorney academ , teach constitut law univers chicago law school .', 'turn elect polit , repres th district illinoi senat , ran u.s. senat .', 'obama receiv nation attent march senat primari win , well-receiv juli democrat nation convent keynot address , landslid novemb elect senat .', ', year begin campaign , close primari campaign hillari clinton , nomin democrat parti presid .']\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"8a84f7","input":"from nltk.stem import WordNetLemmatizer\n\nlemmatizer = WordNetLemmatizer()\n##Unstem our sentences\nsentences = nltk.sent_tokenize(text)\nsentences = remove_stopwords(sentences)\nsentences = remove_punctuation(sentences)\n\n# Lemmatization\ndef lem_sentences(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [lemmatizer.lemmatize(word) for word in words]\n        sentences[i] = ' '.join(words)   \n    return sentences\nsentences = lem_sentences(sentences)\nprint(sentences[:10]) ","output":{"0":{"name":"stdout","output_type":"stream","text":"['barack hussein obama ii /bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ listen bə-rahk hoo-sayn oh-bah-mə born august american politician served th president united state', 'first african-american president united state', 'member democratic party previously served u.s. senator illinois illinois state senator', 'obama born honolulu hawaii', 'graduating columbia university worked community organizer chicago', 'enrolled harvard law school first black president harvard law review', 'graduating became civil right attorney academic teaching constitutional law university chicago law school', 'turning elective politics represented th district illinois senate ran u.s. senate', 'obama received national attention march senate primary win well-received july democratic national convention keynote address landslide november election senate', 'year beginning campaign close primary campaign hillary clinton nominated democratic party president']\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"386d7a","input":"nltk.download('averaged_perceptron_tagger')","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package averaged_perceptron_tagger to /project\n[nltk_data]     s/820ea3ac-497c-43fd-9cb7-abe34292faa8/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":19,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"358282","input":"# POS Tagging\n\n# example\n# CC - coordinating conjunction\n# NN - noun, singular (cat, tree)\n#all_words = nltk.word_tokenize(text)  ###If we want to look at part of speech taking before we stem/lem\ntagged_words = nltk.pos_tag(all_words)\n##Creates a list of lists where each element of the list is [word,partofspeech abbreviation]\n# Tagged word paragraph\nword_tags = []\nfor tw in tagged_words:\n    word_tags.append(tw[0]+\"_\"+tw[1])\n\ntagged_paragraph = ' '.join(word_tags)\n\nprint(tagged_paragraph[:1000])","output":{"0":{"name":"stdout","output_type":"stream","text":"barack_NN hussein_NN obama_NN ii_NN (_( /bəˈrɑːk_JJ huːˈseɪn_NN oʊˈbɑːmə/_NN (_( listen_JJ )_) bə-rahk_JJ hoo-sayn_JJ oh-bah-mə_NN ;_: born_VBN august_RB ,_, )_) is_VBZ an_DT american_JJ politician_NN who_WP served_VBD as_IN the_DT th_NN president_NN of_IN the_DT united_JJ states_NNS from_IN to_TO ._. he_PRP was_VBD the_DT first_JJ african-american_JJ president_NN of_IN the_DT united_JJ states_NNS ._. a_DT member_NN of_IN the_DT democratic_JJ party_NN ,_, he_PRP previously_RB served_VBD as_IN a_DT u.s._JJ senator_NN from_IN illinois_NN from_IN to_TO and_CC as_IN an_DT illinois_NN state_NN senator_NN from_IN to_TO ._. obama_NN was_VBD born_VBN in_IN honolulu_NN ,_, hawaii_NN ._. after_IN graduating_VBG from_IN columbia_NN university_NN in_IN ,_, he_PRP worked_VBD as_IN a_DT community_NN organizer_NN in_IN chicago_NN ._. in_IN ,_, he_PRP enrolled_VBD in_IN harvard_NN law_NN school_NN ,_, where_WRB he_PRP was_VBD the_DT first_JJ black_JJ president_NN of_IN the_DT harvard_NN law_NN review_\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"4007fd","input":"print(tokenized[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"[['barack', 'hussein', 'obama', 'ii', '/bəˈrɑːk', 'huːˈseɪn', 'oʊˈbɑːmə/', 'listen', 'bə-rahk', 'hoo-sayn', 'oh-bah-mə', 'born', 'august', 'american', 'politician', 'served', 'th', 'president', 'united', 'state'], ['first', 'african-american', 'president', 'united', 'state'], ['member', 'democratic', 'party', 'previously', 'served', 'u.s.', 'senator', 'illinois', 'illinois', 'state', 'senator'], ['obama', 'born', 'honolulu', 'hawaii'], ['graduating', 'columbia', 'university', 'worked', 'community', 'organizer', 'chicago'], ['enrolled', 'harvard', 'law', 'school', 'first', 'black', 'president', 'harvard', 'law', 'review'], ['graduating', 'became', 'civil', 'right', 'attorney', 'academic', 'teaching', 'constitutional', 'law', 'university', 'chicago', 'law', 'school'], ['turning', 'elective', 'politics', 'represented', 'th', 'district', 'illinois', 'senate', 'ran', 'u.s.', 'senate'], ['obama', 'received', 'national', 'attention', 'march', 'senate', 'primary', 'win', 'well-received', 'july', 'democratic', 'national', 'convention', 'keynote', 'address', 'landslide', 'november', 'election', 'senate'], ['year', 'beginning', 'campaign', 'close', 'primary', 'campaign', 'hillary', 'clinton', 'nominated', 'democratic', 'party', 'president']]\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"da68dc","input":"# Install gensim - pip install gensim\nimport nltk\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\nnltk.download('punkt')\nfrom wordcloud import WordCloud","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package punkt to /projects/820ea3ac-497c-43fd-\n[nltk_data]     9cb7-abe34292faa8/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"3100a9","input":"    ### Finding the most similar words in the model ###\nsimilar1 = model.wv.most_similar('climate')\n\nsimilar2 = model.wv.most_similar('carbon', topn=10) ","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"01ecc5","input":"similar1, similar2","output":{"0":{"data":{"text/plain":"([('carbon', 0.4502820372581482),\n  ('concentration', 0.43071526288986206),\n  ('effect', 0.422444611787796),\n  ('``', 0.41229310631752014),\n  ('solar', 0.40678927302360535),\n  ('catastrophic', 0.4055933654308319),\n  ('co', 0.40364497900009155),\n  ('radiation', 0.39937278628349304),\n  (':', 0.38512319326400757),\n  ('year', 0.38105612993240356)],\n [('climate', 0.4502819776535034),\n  ('threatened', 0.44164562225341797),\n  ('radiation', 0.37679389119148254),\n  ('goal', 0.365021675825119),\n  ('cause', 0.3615896999835968),\n  ('standard', 0.3409227430820465),\n  ('offer', 0.3268791139125824),\n  ('dioxide', 0.3258012533187866),\n  ('adaptation', 0.3216363489627838),\n  ('ipcc', 0.31083521246910095)])"},"exec_count":26,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"9ea3b0","input":"import urllib\nimport bs4 as bs\nimport re","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"3eacca","input":"def remove_punctuation(sentences):\n    for i in range(len(sentences)):\n        words = nltk.word_tokenize(sentences[i])\n        words = [word for word in words if word not in \",.?!();``\"]\n        sentences[i] = ' '.join(words)\n    return sentences\nsentences = remove_punctuation(sentences)\nprint(sentences[:10]) #eliminating all punctuation","output":{"0":{"name":"stdout","output_type":"stream","text":"['barack hussein obama ii /bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ listen bə-rahk hoo-sayn oh-bah-mə born august american politician served th president united state', 'first african-american president united state', 'member democratic party previously served u.s. senator illinois illinois state senator', 'obama born honolulu hawaii', 'graduating columbia university worked community organizer chicago', 'enrolled harvard law school first black president harvard law review', 'graduating became civil right attorney academic teaching constitutional law university chicago law school', 'turning elective politics represented th district illinois senate ran u.s. senate', 'obama received national attention march senate primary win well-received july democratic national convention keynote address landslide november election senate', 'year beginning campaign close primary campaign hillary clinton nominated democratic party president']\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"cb1aed","input":"#Right now sentences is a list of our sentences that has had stop words removed and been lemm'd\n#Let's go ahead and create a list that's formatted how word2vec needs:\n    # a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)\ntokenized = [nltk.word_tokenize(sentence) for sentence in sentences]","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"7b8385","input":"# from gensim.models import Word2Vec\n\n# Training the Word2Vec model\n# min_count=1 --> Ignores all words with total frequency lower than 1 (i.e., include everything).\nmodel = Word2Vec(tokenized, min_count=1)\n\nmost_common_words = model.wv.index_to_key  # the vocab of the model\n\nmodel.save(\"word2vec.model\") # save the model to use it later\n\n# model = Word2Vec.load(\"word2vec.model\")","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"99dd5a","input":"most_common_words[:10]","output":{"0":{"data":{"text/plain":"['obama',\n \"'s\",\n 'president',\n 'u.s.',\n 'state',\n 'first',\n 'act',\n 'united',\n 'year',\n 'law']"},"exec_count":33,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"ace148","input":"# Most similar words\nsimilar1 = model.wv.most_similar('president')\n\nsimilar2 = model.wv.most_similar('congress', topn=10) ","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"48db6c","input":"similar1, similar2","output":{"0":{"data":{"text/plain":"([('congress', 0.504268229007721),\n  ('new', 0.4410207271575928),\n  ('bill', 0.39064323902130127),\n  ('act', 0.3696286380290985),\n  ('year', 0.3670336902141571),\n  ('state', 0.36527854204177856),\n  ('march', 0.34988000988960266),\n  ('health', 0.3477920889854431),\n  ('ministry', 0.3444102108478546),\n  ('primarily', 0.3405653238296509)],\n [('president', 0.504268229007721),\n  ('new', 0.4633997976779938),\n  ('first', 0.41029754281044006),\n  ('$', 0.3726749122142792),\n  ('public', 0.3626655638217926),\n  ('said', 0.3340929448604584),\n  ('view', 0.3238333463668823),\n  (\"'\", 0.3211585581302643),\n  ('condemned', 0.31534135341644287),\n  ('illinois', 0.31405648589134216)])"},"exec_count":37,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"5a4541","input":"# Finding Word Vectors\nvector = model.wv['president']\nprint(vector)","output":{"0":{"name":"stdout","output_type":"stream","text":"(100,)\n"}},"pos":36,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"ee7792","input":"# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own!\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen('https://en.wikipedia.org/wiki/Barack_Obama').read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\") \n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\n# Preprocessing the data\ntext = re.sub(r'\\[[0-9]*\\]',' ',text) # [0-9]* --> Matches zero or more repetitions of any digit from 0 to 9\ntext = text.lower() #everything to lowercase\ntext = re.sub(r'\\W^.?!',' ',text) # \\W --> Matches any character which is not a word character except (.?!)\ntext = re.sub(r'\\d',' ',text) # \\d --> Matches any decimal digit\ntext = re.sub(r'\\s+',' ',text) # \\s --> Matches any characters that are considered whitespace (Ex: [\\t\\n\\r\\f\\v].)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"348f33","input":"# Without removing stopwords\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42\n                        ).generate(str(sentences))\nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","output":{"0":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"},"exec_count":40,"output_type":"execute_result"},"1":{"data":{"image/png":"9d87ab870c0e41c339cdec0b79c34bd1e21abe04","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":40,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"ff13d3","input":"# reFetching the data\nlame_text = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    lame_text += paragraph.text","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"8d3f42","input":"    ###Doing the same without removing stop words or lemming\nlame_sentences = nltk.sent_tokenize(lame_text)\nlame_tokenized = [nltk.word_tokenize(sentence) for sentence in lame_sentences]","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"ff4f2a","input":"# REDO WORDCLOUD BUT WE SET STOPWORDS EMPTY\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42, ###SET STOPWORDS = [] and/or include_numbers = True or you will get the same thing!!!\n                        stopwords = [],\n                        include_numbers = True).generate(str(lame_sentences)) \nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","output":{"0":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"},"exec_count":43,"output_type":"execute_result"},"1":{"data":{"image/png":"cdb90f59c0d4b32016c61c2f1a7287412bc9c561","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":43,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"ae6b24","input":"# Training the Word2Vec model, but wrong\nmodel = Word2Vec(lame_tokenized, min_count=1)\n\nwords = model.wv.index_to_key\nprint(words[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"[',', 'the', '[', ']', '.', 'of', 'in', 'and', 'to', 'a']\n"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"d3df9e","input":"# Finding Word Vectors\nvector = model.wv['president'] #get the vector of the word \"global\"\nprint(vector)","output":{"0":{"name":"stdout","output_type":"stream","text":"[-0.11300201  0.11360928  0.05625751  0.03218864  0.00869641 -0.21692751\n  0.06753556  0.28762406 -0.11243377 -0.18464085  0.04791121 -0.26149356\n -0.01912937  0.0723279   0.01354559 -0.10805559  0.11217219 -0.1590023\n -0.00727    -0.32040107  0.08625188  0.07621483  0.14313951 -0.06332561\n -0.03948219  0.10829421 -0.13020343  0.00153408 -0.10245452 -0.00791564\n  0.20229201 -0.01886254 -0.01611624 -0.17373459 -0.11044258  0.17323871\n  0.08486327 -0.02853864 -0.08702251 -0.1881968   0.0444315  -0.13298422\n -0.09928566  0.0302094   0.0792958  -0.10169937 -0.15914045 -0.0215276\n  0.11527775  0.16058409  0.09702297 -0.15373991 -0.08063399 -0.02781383\n -0.10714728  0.08848191  0.10807375 -0.08488362 -0.10307433  0.04733418\n -0.02154994  0.0259988   0.02423809 -0.01452748 -0.16494013  0.2007001\n -0.0237377   0.12603624 -0.1849697   0.10228344 -0.02849977  0.15404491\n  0.19454563  0.0592561   0.18046004  0.09952319 -0.04153993  0.03036333\n -0.0633949  -0.02634128 -0.14224534 -0.04921436 -0.09295879  0.2004102\n -0.02684066 -0.06512961  0.06702036  0.12944184  0.12297049  0.02445944\n  0.15541251  0.06804404  0.010924    0.0387462   0.26152137  0.10421883\n  0.09508184 -0.11948916 -0.00827458  0.02854058]\n"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"773907","input":"# Most similar words\nsimilar1 = model.wv.most_similar('president')\n\nsimilar2 = model.wv.most_similar('congress', topn=10) ","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"38be8b","input":"similar1, similar2","output":{"0":{"data":{"text/plain":"([(',', 0.9987039566040039),\n  ('to', 0.9987033009529114),\n  (']', 0.9986547231674194),\n  ('[', 0.9986425042152405),\n  ('at', 0.9986262917518616),\n  (\"'s\", 0.9986180067062378),\n  ('and', 0.9986137747764587),\n  ('a', 0.998613178730011),\n  ('of', 0.9986059665679932),\n  ('in', 0.9985992312431335)],\n [('largest', 0.5590720176696777),\n  ('Comprehensive', 0.5413334369659424),\n  ('welfare', 0.5380709767341614),\n  ('prevent', 0.5370659828186035),\n  ('refused', 0.5333818793296814),\n  ('cabinet', 0.5283961892127991),\n  ('enacted', 0.526983916759491),\n  ('winner', 0.5249868631362915),\n  ('sexual', 0.5220809578895569),\n  ('pace', 0.5215548872947693)])"},"exec_count":47,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"df73a8","input":"text[:100]","output":{"0":{"data":{"text/plain":"' barack hussein obama ii (/bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ (listen) bə-rahk hoo-sayn oh-bah-mə; born augu'"},"exec_count":5,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"77f658","input":"# Tokenizing sentences\nsentences = nltk.sent_tokenize(text) #tokenizing or splitting a string, text into a list of sentences.","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b2c860","input":"print(sentences[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"[' barack hussein obama ii (/bəˈrɑːk huːˈseɪn oʊˈbɑːmə/ (listen) bə-rahk hoo-sayn oh-bah-mə; born august , ) is an american politician who served as the th president of the united states from to .', 'he was the first african-american president of the united states.', 'a member of the democratic party, he previously served as a u.s. senator from illinois from to and as an illinois state senator from to .', 'obama was born in honolulu, hawaii.', 'after graduating from columbia university in , he worked as a community organizer in chicago.', 'in , he enrolled in harvard law school, where he was the first black president of the harvard law review.', 'after graduating, he became a civil rights attorney and an academic, teaching constitutional law at the university of chicago law school from to .', 'turning to elective politics, he represented the th district in the illinois senate from until , when he ran for the u.s. senate.', 'obama received national attention in with his march senate primary win, his well-received july democratic national convention keynote address, and his landslide november election to the senate.', 'in , a year after beginning his campaign, and after a close primary campaign against hillary clinton, he was nominated by the democratic party for president.']\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"7e2828","input":"# Tokenizing words\nall_words = nltk.word_tokenize(text) #tokenizing or splitting a string, text into a list of words.","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"86a0ff","input":"print(all_words[:10])","output":{"0":{"name":"stdout","output_type":"stream","text":"['barack', 'hussein', 'obama', 'ii', '(', '/bəˈrɑːk', 'huːˈseɪn', 'oʊˈbɑːmə/', '(', 'listen']\n"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"03e43f","input":"## Testing our model","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"041540","input":"# Natural Language Processing using NLTK","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"060554","input":"## NLP Part 0 - Get some Data!","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"0c4c34","input":"## NLP Part 3b - Lemmatization\n#### Lemmatization considers the context and converts the word to its meaningful base form","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"1ad8ce","input":"#### some other prepossessing methods using NLTK\n## NLP Part 4 - POS Tagging\n#### marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"2087c0","input":"## NLP Part 2 - Stopwords and Punctuation","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"35468d","input":"## NLP Part 1 - Tokenization of paragraphs/sentences","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"6ea102","input":"## Training the Word2Vec model","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"73ee2a","input":"## Get our data","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"abf8e7","input":"## NLP Part 3a - Stemming the words\n#### stemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"b7a1fb","input":"","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"c31596","input":"## Why did we do all this work","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"faf84c","input":"# Word2Vec Model Visualization","pos":25,"type":"cell"}
{"end":1655327632505,"exec_count":4,"id":"9024b5","input":"import re\nx = 'abc. ... - + = [] {} /\\ <> , . !@#$%^&*() _ | ` \"\" ; : ?'\nx = re.sub(r'[^\\w.,;!?]+',' ',x)\nx","kernel":"nlp_env","output":{"0":{"data":{"text/plain":"'abc. ... , . ! _ ; ?'"},"exec_count":4}},"pos":5.5,"start":1655327632502,"state":"done","type":"cell"}
{"id":0,"time":1655327371590,"type":"user"}
{"last_load":1655327371174,"type":"file"}